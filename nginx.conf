
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}

# load modules compiled as Dynamic Shared Object (DSO)
#
#dso {
#    load ngx_http_fastcgi_module.so;
#    load ngx_http_rewrite_module.so;
#}

http {
     upstream foo.com {
        server 127.0.0.1 fail_timeout=53 weight=4 max_fails=100;
        server agentzh.org:81;
    }

    upstream bar {
        server 127.0.0.1:12085;
	#check interval=3 rise=2 fall=5 timeout=1000 type=http;
        #check_http_send "HEAD / HTTP/1.0\r\n\r\n";
        #check_http_expect_alive http_2xx http_3xx;
#        server 127.0.0.1:12086;
    }


    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       8080;
        server_name  localhost;
# sample output for the following /upstream interface:
# upstream foo.com:
#     addr = 127.0.0.1:80, weight = 4, fail_timeout = 53, max_fails = 100
#     addr = 106.187.41.147:81, weight = 1, fail_timeout = 10, max_fails = 1
# upstream bar:
#

location = /upstreams {
            default_type text/plain;
            content_by_lua '
		
                local concat = table.concat
                local upstream = require "ngx.upstream"
                local get_servers = upstream.get_servers
                local get_upstreams = upstream.get_upstreams
		local add_server = upstream.add_server

		local hello = upstream.say_hello()
		ngx.print(hello)
		ngx.print("\\n")

		--local err = add_server("bar","127.0.0.5:8080")
		--ngx.print(err)
		--ngx.print("\\n")

                local us = get_upstreams()
                for _, u in ipairs(us) do
                    ngx.say("upstream ", u, ":")
                    local srvs, err = get_servers(u)
                    if not srvs then
                        ngx.say("failed to get servers in upstream ", u)
                    else
                        for _, srv in ipairs(srvs) do
                            local first = true
                            for k, v in pairs(srv) do
                                if first then
                                    first = false
                                    ngx.print("    ")
                                else
                                    ngx.print(", ")
                                end
                                if type(v) == "table" then
                                    ngx.print(k, " = {", concat(v, ", "), "}")
                                else
                                    ngx.print(k, " = ", v)
                                end
                            end
                            ngx.print("\\n")
                        end
                    end
                end
            ';
        }
	location   /get_servers {
            	default_type text/plain;
            	content_by_lua '
                	local concat = table.concat
                	local upstream = require "ngx.upstream"
                	local get_servers = upstream.get_servers
                	local get_upstreams = upstream.get_upstreams
			--local add_server = upstream.add_server

			local args =  ngx.req.get_uri_args()
			local upstream_name;
			for key, val in pairs(args) do
                		if type(val) == "table" then
                    			ngx.say(key, ": ", table.concat(val, ", "))
					upstream_name = val
                		else
                    			ngx.say(key, ": ", val)
					upstream_name = val
            			end	
			end

                    	ngx.say("upstream ", upstream_name, ":")
                    	local srvs, err = get_servers(upstream_name)
                    	if not srvs then
                        	ngx.say("failed to get servers in upstream ", upstream_name)
                    	else
                        	for _, srv in ipairs(srvs) do
                            		local first = true
                            		for k, v in pairs(srv) do
                                		if first then
                                    			first = false
                                    			ngx.print("    ")
                                		else
                                    			ngx.print(", ")
                                		end
                                		if type(v) == "table" then
                                    			ngx.print(k, " = {", concat(v, ", "), "}")
                                		else
                                    			ngx.print(k, " = ", v)
                                		end
                            		end
                       			ngx.print("\\n")
				end
			end
			

		';
		
	}

	location  /add_server {

            	default_type text/plain;
            	content_by_lua '

                	local concat = table.concat
                	local upstream = require "ngx.upstream"
                	local get_servers = upstream.get_servers
                	local get_upstreams = upstream.get_upstreams
			local add_server = upstream.add_server

			local args =  ngx.req.get_uri_args()
			local upstream_name

			upstream_name = args["upstream"]
			local server_ip = args["ip"]
			local server_port = args["port"]
			local weight = 1
			local max_fails = 10
			local fail_timeout = 10

			--for key, val in pairs(args) do
                		--if type(val) == "table" then
                    			--ngx.say(key, ": ", table.concat(val, ", "))
					--upstream_name = val
                		--else
                    			--ngx.say(key, ": ", val)
					--upstream_name = val
            			--end	
			--end

                    	--ngx.say("upstream ", ":", upstream_name )
			--ngx.say("server ", ":", server_ip..":"..server_port)
		
			local err = add_server("bar",server_ip..":"..server_port,weight,max_fails,fail_timeout)
			--ngx.print(err)
			--ngx.print("\\n----------------------------\\n")

                    	local srvs, err = get_servers(upstream_name)
                    	if not srvs then
                        	ngx.say("failed to get servers in upstream ", upstream_name)
                    	else
                         	for _, srv in ipairs(srvs) do
                            		local first = true
                           		for k, v in pairs(srv) do
                                		if first then
                                    			first = false
                                    			ngx.print("    ")
                                		else
                                    			ngx.print(", ")
                                		end
                                		if type(v) == "table" then
                                    			ngx.print(k, " = {", concat(v, ", "), "}")
                                		else
                                    			ngx.print(k, " = ", v)
                                		end
                            		end
                        		ngx.print("\\n")
				end
			end


		';
	}
	location /get_primary_peers {
            	default_type text/plain;
            	content_by_lua '
				
		local upstream = require "ngx.upstream"
            	local ljson = require "ljson"
            	us = upstream.get_upstreams()
            	for _, u in ipairs(us) do
                	local peers, err = upstream.get_primary_peers(u)
                	if not peers then
                    		ngx.say("failed to get peers: ", err)
                    		return
                	end
                	ngx.say(ljson.encode(peers))
            	end
		';
	}
	
        #charset koi8-r;

        access_log  logs/1080.host.access.log  main;
	location /status {
            check_status;

            access_log   off;
            #allow SOME.IP.ADD.RESS;
            #deny all;
        }

        location / {
		proxy_pass http://bar;
            #root   html;
            #index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
